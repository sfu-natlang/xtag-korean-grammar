("nx0NCO" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>

N.t:<arg1_type>=NP_1:<arg1_type>
NP_1:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>

" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :substp T))  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) ) 
("e0NCO" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>


N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>
" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :constraints "NA" :constraint-type :NA) (((("" . "0")) :display-feature? T)) )  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) ) 
("rg0NCO" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>

S_c.b:<clause-type> = adnom
S_r.t:<clause-type> = S_c.b:<clause-type>
NP_f.t:<case>=NP_r.b:<case>
NP_f.t:<aux-pp>=NP_r.b:<aux-pp>
NP_f.t:<adv-pp>=NP_r.b:<adv-pp>
NP_f.t:<topic>=NP_r.b:<topic>
NP_w.t:<chain>=NP_0.t:<chain>
NP_w.t:<accept_mod>=-" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r")) :display-feature? T) (((("S" . "c")) :display-feature? T) (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :constraints "NA" :constraint-type :NA) (((("" . "0")) :display-feature? T)) )  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) )  (((("NP" . "w")) :display-feature? T :constraints "NA" :constraint-type :NA) (((("" . "w")) :display-feature? T)) ) )  (((("NP" . "f")) :display-feature? T :footp T :constraints "NA" :constraint-type :NA)) ) 
("nx0NCOsx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

S_c.b:<clause-type>=coord/subord

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_c.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_c.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_c.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_c.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_c.b:<pre-ending>


N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>

S_f.t:<tense> = S_r.b:<tense>
S_f.t:<mode> = S_r.b:<mode>
S_f.t:<clause-type> = S_r.b:<clause-type>
S_f.t:<ending> = S_r.b:<ending>
S_f.t:<pre-ending> = S_r.b:<pre-ending>





" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r")) :display-feature? T) (((("S" . "c")) :display-feature? T) (((("NP" . "0")) :display-feature? T :substp T))  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) )  (((("S" . "f")) :display-feature? T :footp T :constraints "NA" :constraint-type :NA)) ) 
("e0NCOsx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

S_c.b:<clause-type>=coord/subord

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_c.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_c.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_c.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_c.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_c.b:<pre-ending>

N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>


S_f.t:<tense> = S_r.b:<tense>
S_f.t:<mode> = S_r.b:<mode>
S_f.t:<clause-type> = S_r.b:<clause-type>
S_f.t:<ending> = S_r.b:<ending>
S_f.t:<pre-ending> = S_r.b:<pre-ending>

" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r"))) (((("S" . "c"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("NP" . "1"))) (((("N" . "")) :headp T)) ) ) )  (((("S" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("nx0NCONP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

N.t:<copula> = +

N.t:<case>=NP_1.b:<case>
NP_1.b:<case> = NP_1.t:<case>
NP_1.t:<case> = VP.b:<case>
VP.t:<case>=S_r.t:<case>
S_r.t:<case>=NP.b:<case>

N.t:<aux-pp>=NP_1.b:<aux-pp>
NP_1.b:<aux-pp> = NP_1.t:<aux-pp>
NP_1.t:<aux-pp> = VP.b:<aux-pp>
VP.t:<aux-pp>=S_r.t:<aux-pp>
S_r.t:<aux-pp>=NP.b:<aux-pp>

N.t:<adv-pp>=NP_1.b:<adv-pp>
NP_1.b:<adv-pp> = NP_1.t:<adv-pp>
NP_1.t:<adv-pp> = VP.b:<adv-pp>
VP.t:<adv-pp>=S_r.t:<adv-pp>
S_r.t:<adv-pp>=NP.b:<adv-pp>

N.t:<topic>=NP_1.b:<topic>
NP_1.b:<topic> = NP_1.t:<topic>
NP_1.t:<topic> = VP.b:<topic>
VP.t:<topic>=S_r.t:<topic>
S_r.t:<topic>=NP.b:<topic>

S_r.b:<clause-type> = nominal


N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>


N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>





" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "")) :display-feature? T) (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :substp T))  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T)) ) ) ) ) 
("e0NCONP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "

N.t:<copula> = +

N.t:<case>=NP_1.b:<case>
NP_1.b:<case> = NP_1.t:<case>
NP_1.t:<case> = VP.b:<case>
VP.t:<case>=S_r.t:<case>
S_r.t:<case>=NP.b:<case>

N.t:<aux-pp>=NP_1.b:<aux-pp>
NP_1.b:<aux-pp> = NP_1.t:<aux-pp>
NP_1.t:<aux-pp> = VP.b:<aux-pp>
VP.t:<aux-pp>=S_r.t:<aux-pp>
S_r.t:<aux-pp>=NP.b:<aux-pp>

N.t:<adv-pp>=NP_1.b:<adv-pp>
NP_1.b:<adv-pp> = NP_1.t:<adv-pp>
NP_1.t:<adv-pp> = VP.b:<adv-pp>
VP.t:<adv-pp>=S_r.t:<adv-pp>
S_r.t:<adv-pp>=NP.b:<adv-pp>

N.t:<topic>=NP_1.b:<topic>
NP_1.b:<topic> = NP_1.t:<topic>
NP_1.t:<topic> = VP.b:<topic>
VP.t:<topic>=S_r.t:<topic>
S_r.t:<topic>=NP.b:<topic>

S_r.b:<clause-type> = nominal


N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>


N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>

" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . ""))) (((("S" . "r"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("NP" . "1"))) (((("N" . "")) :headp T)) ) ) ) ) 
("nx0NCONP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "


NP_f.t:<case> =  NP_r.b:<case>
NP_f.t:<aux-pp> =  NP_r.b:<aux-pp>
NP_f.t:<adv-pp> =  NP_r.b:<adv-pp>
NP_f.t:<topic> =  NP_r.b:<topic>
NP_f.t:<type> =  NP_r.b:<type>


S_r.b:<clause-type> = adnom

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>


N.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>

" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r")) :display-feature? T) (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :substp T))  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T)) ) ) )  (((("NP" . "f")) :display-feature? T :footp T :constraints "NA" :constraint-type :NA)) ) 
("e0NCONP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "


NP_f.t:<case> =  NP_r.b:<case>
NP_f.t:<aux-pp> =  NP_r.b:<aux-pp>
NP_f.t:<adv-pp> =  NP_r.b:<adv-pp>
NP_f.t:<topic> =  NP_r.b:<topic>
NP_f.t:<type> =  NP_r.b:<type>


S_r.b:<clause-type> = adnom

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>


N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>
" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r")) :display-feature? T) (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :constraints "NA" :constraint-type :NA) (((("" . "0")) :display-feature? T)) )  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) )  (((("NP" . "f")) :display-feature? T :footp T :constraints "NA" :constraint-type :NA)) ) 
("nx0NCOvx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "


VP_f.t:<assign_case0>=VP_r.b:<assign_case0>

VP_f.t:<tense>=VP_r.b:<tense>
VP_f.t:<mode>=VP_r.b:<mode>
VP_f.t:<clause-type>=VP_r.b:<clause-type>
VP_f.t:<ending>=VP_r.b:<ending>
VP_f.t:<pre-ending>=VP_r.b:<pre-ending>


N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>

N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>

" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("VP" . "r")) :display-feature? T) (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :substp T))  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) )  (((("VP" . "f")) :display-feature? T :footp T :constraints "NA" :constraint-type :NA)) ) 
("e0NCOvx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "


VP_f.t:<assign_case0>=VP_r.b:<assign_case0>

VP_f.t:<tense>=VP_r.b:<tense>
VP_f.t:<mode>=VP_r.b:<mode>
VP_f.t:<clause-type>=VP_r.b:<clause-type>
VP_f.t:<ending>=VP_r.b:<ending>
VP_f.t:<pre-ending>=VP_r.b:<pre-ending>

N.t:<copula> = +

N.t:<assign_case0>= NP_1.b:<assign_case0>
NP_1.b:<assign_case0> = NP_1.t:<assign_case0>
NP_1.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0>=NP_0.t:<case>
NP_0.t:<case> = nom

N.t:<tense>= NP_1.b:<tense>
NP_1.b:<tense> = NP_1.t:<tense>
NP_1.t:<tense> = VP.b:<tense>
VP.t:<tense>=S_r.b:<tense>

N.t:<mode>= NP_1.b:<mode>
NP_1.b:<mode> = NP_1.t:<mode>
NP_1.t:<mode> = VP.b:<mode>
VP.t:<mode>=S_r.b:<mode>

N.t:<clause-type>= NP_1.b:<clause-type>
NP_1.b:<clause-type> = NP_1.t:<clause-type>
NP_1.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type>=S_r.b:<clause-type>

N.t:<ending>= NP_1.b:<ending>
NP_1.b:<ending> = NP_1.t:<ending>
NP_1.t:<ending> = VP.b:<ending>
VP.t:<ending>=S_r.b:<ending>

N.t:<pre-ending>= NP_1.b:<pre-ending>
NP_1.b:<pre-ending> = NP_1.t:<pre-ending>
NP_1.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending>=S_r.b:<pre-ending>


N.t:<arg1_type>=NP_1.t:<arg1_type>
NP_1.t:<arg1_type>=VP.t:<arg1_type>
VP.t:<arg1_type>=NP_0.t:<type>


" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("VP" . "r")) :display-feature? T) (((("S" . "r")) :display-feature? T) (((("NP" . "0")) :display-feature? T :constraints "NA" :constraint-type :NA) (((("" . "0")) :display-feature? T)) )  (((("VP" . "")) :display-feature? T) (((("NP" . "1")) :display-feature? T) (((("N" . "")) :display-feature? T :headp T)) ) ) )  (((("VP" . "f")) :display-feature? T :footp T :constraints "NA" :constraint-type :NA)) ) 
