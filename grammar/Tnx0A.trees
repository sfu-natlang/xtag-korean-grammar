("nx0A" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<mode> = AP.t:<mode>
AP.t:<mode> = VP.b:<mode>
VP.t:<mode> =  S_r.b:<mode>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom


A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
 VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r"))) (((("NP" . "0")) :substp T))  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) ) 
("_A" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<mode> = AP.t:<mode>
AP.t:<mode> = VP.b:<mode>
VP.t:<mode> =  S_r.b:<mode>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>


A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom
NP_0.t:<accept_mod>=-

A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) ) 
("rg0A" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom
NP_0.t:<accept_mod>=-

A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>


S_c.b:<clause-type> = adnom
S_r.t:<clause-type> = S_c.b:<clause-type>
NP_f.t:<case>=NP_r.b:<case>
NP_f.t:<aux-pp>=NP_r.b:<aux-pp>
NP_f.t:<adv-pp>=NP_r.b:<adv-pp>
NP_f.t:<topic>=NP_r.b:<topic>
NP_w.t:<chain>=NP_0.t:<chain>
NP_w.t:<accept_mod>=-" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r"))) (((("S" . "c"))) (((("S" . "r"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("NP" . "w")) :constraints "NA" :constraint-type :NA) (((("" . "w")))) ) )  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("nx0Asx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_c.b:<tense>
A.t:<mode> = AP.t:<mode>
AP.t:<mode> = VP.b:<mode>
VP.t:<mode> =  S_c.b:<mode>


S_c.b:<clause-type> = coord/subord
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_c.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_c.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_c.b:<pre-ending>


A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom

A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>

S_f.b:<mode> = S_r.b:<mode>
S_f.b:<clause-type> = S_r.b:<clause-type>
S_f.b:<tense>= S_r.b:<tense>
S_f.b:<ending>= S_r.b:<ending>
S_f.b:<pre-ending>= S_r.b:<pre-ending>

" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r"))) (((("S" . "c"))) (((("NP" . "0")) :substp T))  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("S" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("_Asx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_c.b:<tense>
A.t:<mode> = AP.t:<mode>
AP.t:<mode> = VP.b:<mode>
VP.t:<mode> =  S_c.b:<mode>
S_c.b:<clause-type> = coord/subord
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_c.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_c.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_c.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom
NP_0.t:<accept_mod>=-

A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>

S_f.b:<mode> = S_r.b:<mode>
S_f.b:<clause-type> = S_r.b:<clause-type>
S_f.b:<tense>= S_r.b:<tense>
S_f.b:<ending>= S_r.b:<ending>
S_f.b:<pre-ending>= S_r.b:<pre-ending>




" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("S" . "r"))) (((("S" . "c"))) (((("NP" . "0"))) (((("" . "0")))) )  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("S" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("nx0ANP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom

A.t:<case>=AP.t:<case>
AP.t:<case>=VP.b:<case>
VP.t:<case>=S_r.t:<case>
S_r.t:<case>=NP.b:<case>

A.t:<aux-pp>=AP.t:<aux-pp>
AP.t:<aux-pp>=VP.b:<aux-pp>
VP.t:<aux-pp>=S_r.t:<aux-pp>
S_r.t:<aux-pp>=NP.b:<aux-pp>

A.t:<adv-pp>=AP.t:<adv-pp>
AP.t:<adv-pp>=VP.b:<adv-pp>
VP.t:<adv-pp>=S_r.t:<adv-pp>
S_r.t:<adv-pp>=NP.b:<adv-pp>

A.t:<topic>=AP.t:<topic>
AP.t:<topic>=VP.b:<topic>
VP.t:<topic>=S_r.t:<topic>
S_r.t:<topic>=NP.b:<topic>

S_r.b:<clause-type> = nominal
S_r.b:<ending>=ki/um


A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . ""))) (((("S" . "r"))) (((("NP" . "0")) :substp T))  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) ) ) 
("_ANP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom
NP_0.t:<accept_mod>=-

A.t:<case>=AP.t:<case>
AP.t:<case>=VP.b:<case>
VP.t:<case>=S_r.t:<case>
S_r.t:<case>=NP.b:<case>

A.t:<aux-pp>=AP.t:<aux-pp>
AP.t:<aux-pp>=VP.b:<aux-pp>
VP.t:<aux-pp>=S_r.t:<aux-pp>
S_r.t:<aux-pp>=NP.b:<aux-pp>

A.t:<adv-pp>=AP.t:<adv-pp>
AP.t:<adv-pp>=VP.b:<adv-pp>
VP.t:<adv-pp>=S_r.t:<adv-pp>
S_r.t:<adv-pp>=NP.b:<adv-pp>

A.t:<topic>=AP.t:<topic>
AP.t:<topic>=VP.b:<topic>
VP.t:<topic>=S_r.t:<topic>
S_r.t:<topic>=NP.b:<topic>

S_r.b:<clause-type> = nominal
S_r.b:<ending>=ki/um


A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . ""))) (((("S" . "r"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) ) ) 
("nx0ANP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "NP_f.t:<case> =  NP_r.b:<case>
NP_f.t:<aux-pp> =  NP_r.b:<aux-pp>
NP_f.t:<adv-pp>=NP_r.b:<adv-pp>
NP_f.t:<topic>=NP_r.b:<topic>
NP_f.t:<type> =  NP_r.b:<type>

A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom


S_r.b:<clause-type> = adnom



A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r"))) (((("S" . "r"))) (((("NP" . "0")) :substp T))  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("_ANP" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "NP_f.t:<case> =  NP_r.b:<case>
NP_f.t:<aux-pp> =  NP_r.b:<aux-pp>
NP_f.t:<adv-pp>=NP_r.b:<adv-pp>
NP_f.t:<topic>=NP_r.b:<topic>
NP_f.t:<type> =  NP_r.b:<type>

A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>
A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom
NP_0.t:<accept_mod>=-


S_r.b:<clause-type> = adnom



A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("NP" . "r"))) (((("S" . "r"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("NP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("nx0Avx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "VP_f.t:<assign_case0>=VP_r.b:<assign_case0>
VP_f.t:<tense>=VP_r.b:<tense>
VP_f.t:<mode>=VP_r.b:<mode>
VP_f.t:<clause-type>=VP_r.b:<clause-type>

A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>

A.t:<mode> = AP.t:<mode>
AP.t:<mode> = VP.b:<mode>
VP.t:<mode> =  S_r.b:<mode>


A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom


S_r.b:<clause-type> = coord/subord



A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("VP" . "r"))) (((("S" . "r"))) (((("NP" . "0")) :substp T))  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("VP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
("_Avx" :COMMENT-DISPLAY? NIL :FEATURE-DISPLAY? NIL :EQUATION-DISPLAY? NIL :UNIFICATION-EQUATIONS "VP_f.t:<assign_case0>=VP_r.b:<assign_case0>
VP_f.t:<tense>=VP_r.b:<tense>
VP_f.t:<mode>=VP_r.b:<mode>
VP_f.t:<clause-type>=VP_r.b:<clause-type>
VP_f.t:<ending>=VP_r.b:<ending>
VP_f.t:<pre-ending>=VP_r.b:<pre-ending>

A.t:<tense> = AP.t:<tense>
AP.t:<tense> = VP.b:<tense>
VP.t:<tense> =  S_r.b:<tense>

A.t:<mode> = AP.t:<mode>
AP.t:<mode> = VP.b:<mode>
VP.t:<mode> =  S_r.b:<mode>


A.t:<clause-type> = AP.t:<clause-type>
AP.t:<clause-type> = VP.b:<clause-type>
VP.t:<clause-type> =  S_r.b:<clause-type>
A.t:<ending> = AP.t:<ending>
AP.t:<ending> = VP.b:<ending>
VP.t:<ending> =  S_r.b:<ending>
A.t:<pre-ending> = AP.t:<pre-ending>
AP.t:<pre-ending> = VP.b:<pre-ending>
VP.t:<pre-ending> =  S_r.b:<pre-ending>

A.t:<assign_case0> = AP.t:<assign_case0>
AP.t:<assign_case0> = VP.b:<assign_case0>
VP.t:<assign_case0> =  NP_0.t:<case>
NP_0.t:<case> = nom
NP_0.t:<accept_mod>=-


S_r.b:<clause-type> = coord/subord



A.t:<arg1_type> = AP.t:<arg1_type>
AP.t:<arg1_type> =  VP.t:<arg1_type>
VP.t:<arg1_type> = NP_0.t:<type>" :COMMENTS NIL :SHAPE NIL :BORDER-WIDTH NIL :CONSTRAINT-STYLE NIL :CONNECTOR NIL :DEFAULT-STYLE NIL :SUBSCRIPT-STYLE NIL :WHITE-SPACE NIL  :MINIMUM-NODE-SEPARATION NIL :LEVEL-SEPARATION NIL)
 (((("VP" . "r"))) (((("S" . "r"))) (((("NP" . "0")) :constraints "NA" :constraint-type :NA) (((("" . "0")))) )  (((("VP" . ""))) (((("AP" . ""))) (((("A" . "")) :headp T)) ) ) )  (((("VP" . "f")) :footp T :constraints "NA" :constraint-type :NA)) ) 
